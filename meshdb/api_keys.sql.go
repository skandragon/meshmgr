// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: api_keys.sql

package meshdb

import (
	"context"
	"time"
)

const createAPIKey = `-- name: CreateAPIKey :one
INSERT INTO user_api_keys (user_id, key_hash, key_name, expires_at)
VALUES ($1, $2, $3, $4)
RETURNING id, user_id, key_hash, key_name, expires_at, created_at, last_used_at
`

type CreateAPIKeyParams struct {
	UserID    int64      `json:"user_id"`
	KeyHash   string     `json:"key_hash"`
	KeyName   string     `json:"key_name"`
	ExpiresAt *time.Time `json:"expires_at"`
}

func (q *Queries) CreateAPIKey(ctx context.Context, arg CreateAPIKeyParams) (UserApiKey, error) {
	row := q.db.QueryRow(ctx, createAPIKey,
		arg.UserID,
		arg.KeyHash,
		arg.KeyName,
		arg.ExpiresAt,
	)
	var i UserApiKey
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.KeyHash,
		&i.KeyName,
		&i.ExpiresAt,
		&i.CreatedAt,
		&i.LastUsedAt,
	)
	return i, err
}

const deleteAPIKey = `-- name: DeleteAPIKey :exec
DELETE FROM user_api_keys
WHERE id = $1
`

func (q *Queries) DeleteAPIKey(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteAPIKey, id)
	return err
}

const deleteExpiredAPIKeys = `-- name: DeleteExpiredAPIKeys :exec
DELETE FROM user_api_keys
WHERE expires_at IS NOT NULL AND expires_at < NOW()
`

func (q *Queries) DeleteExpiredAPIKeys(ctx context.Context) error {
	_, err := q.db.Exec(ctx, deleteExpiredAPIKeys)
	return err
}

const getAPIKey = `-- name: GetAPIKey :one
SELECT id, user_id, key_hash, key_name, expires_at, created_at, last_used_at FROM user_api_keys
WHERE id = $1
`

func (q *Queries) GetAPIKey(ctx context.Context, id int64) (UserApiKey, error) {
	row := q.db.QueryRow(ctx, getAPIKey, id)
	var i UserApiKey
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.KeyHash,
		&i.KeyName,
		&i.ExpiresAt,
		&i.CreatedAt,
		&i.LastUsedAt,
	)
	return i, err
}

const getAPIKeyByHash = `-- name: GetAPIKeyByHash :one
SELECT id, user_id, key_hash, key_name, expires_at, created_at, last_used_at FROM user_api_keys
WHERE key_hash = $1
`

func (q *Queries) GetAPIKeyByHash(ctx context.Context, keyHash string) (UserApiKey, error) {
	row := q.db.QueryRow(ctx, getAPIKeyByHash, keyHash)
	var i UserApiKey
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.KeyHash,
		&i.KeyName,
		&i.ExpiresAt,
		&i.CreatedAt,
		&i.LastUsedAt,
	)
	return i, err
}

const listAPIKeysByUser = `-- name: ListAPIKeysByUser :many
SELECT id, user_id, key_hash, key_name, expires_at, created_at, last_used_at FROM user_api_keys
WHERE user_id = $1
ORDER BY created_at DESC
`

func (q *Queries) ListAPIKeysByUser(ctx context.Context, userID int64) ([]UserApiKey, error) {
	rows, err := q.db.Query(ctx, listAPIKeysByUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UserApiKey
	for rows.Next() {
		var i UserApiKey
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.KeyHash,
			&i.KeyName,
			&i.ExpiresAt,
			&i.CreatedAt,
			&i.LastUsedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAPIKeyHash = `-- name: UpdateAPIKeyHash :one
UPDATE user_api_keys
SET key_hash = $1
WHERE id = $2
RETURNING id, user_id, key_hash, key_name, expires_at, created_at, last_used_at
`

type UpdateAPIKeyHashParams struct {
	KeyHash string `json:"key_hash"`
	ID      int64  `json:"id"`
}

func (q *Queries) UpdateAPIKeyHash(ctx context.Context, arg UpdateAPIKeyHashParams) (UserApiKey, error) {
	row := q.db.QueryRow(ctx, updateAPIKeyHash, arg.KeyHash, arg.ID)
	var i UserApiKey
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.KeyHash,
		&i.KeyName,
		&i.ExpiresAt,
		&i.CreatedAt,
		&i.LastUsedAt,
	)
	return i, err
}

const updateAPIKeyLastUsed = `-- name: UpdateAPIKeyLastUsed :exec
UPDATE user_api_keys
SET last_used_at = NOW()
WHERE id = $1
`

func (q *Queries) UpdateAPIKeyLastUsed(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, updateAPIKeyLastUsed, id)
	return err
}
