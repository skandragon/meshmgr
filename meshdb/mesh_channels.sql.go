// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: mesh_channels.sql

package meshdb

import (
	"context"
)

const countMeshChannels = `-- name: CountMeshChannels :one
SELECT COUNT(*) FROM mesh_channels
WHERE mesh_id = $1
`

func (q *Queries) CountMeshChannels(ctx context.Context, meshID int64) (int64, error) {
	row := q.db.QueryRow(ctx, countMeshChannels, meshID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const deleteMeshChannel = `-- name: DeleteMeshChannel :exec
DELETE FROM mesh_channels
WHERE mesh_id = $1 AND channel_index = $2
`

type DeleteMeshChannelParams struct {
	MeshID       int64 `json:"mesh_id"`
	ChannelIndex int32 `json:"channel_index"`
}

func (q *Queries) DeleteMeshChannel(ctx context.Context, arg DeleteMeshChannelParams) error {
	_, err := q.db.Exec(ctx, deleteMeshChannel, arg.MeshID, arg.ChannelIndex)
	return err
}

const getMeshChannel = `-- name: GetMeshChannel :one
SELECT id, mesh_id, channel_index, channel_role, psk, channel_name, settings, created_at, updated_at FROM mesh_channels
WHERE mesh_id = $1 AND channel_index = $2
`

type GetMeshChannelParams struct {
	MeshID       int64 `json:"mesh_id"`
	ChannelIndex int32 `json:"channel_index"`
}

func (q *Queries) GetMeshChannel(ctx context.Context, arg GetMeshChannelParams) (MeshChannel, error) {
	row := q.db.QueryRow(ctx, getMeshChannel, arg.MeshID, arg.ChannelIndex)
	var i MeshChannel
	err := row.Scan(
		&i.ID,
		&i.MeshID,
		&i.ChannelIndex,
		&i.ChannelRole,
		&i.Psk,
		&i.ChannelName,
		&i.Settings,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getPrimaryChannel = `-- name: GetPrimaryChannel :one
SELECT id, mesh_id, channel_index, channel_role, psk, channel_name, settings, created_at, updated_at FROM mesh_channels
WHERE mesh_id = $1 AND channel_index = 0
`

// Get the primary (channel 0) for a mesh
func (q *Queries) GetPrimaryChannel(ctx context.Context, meshID int64) (MeshChannel, error) {
	row := q.db.QueryRow(ctx, getPrimaryChannel, meshID)
	var i MeshChannel
	err := row.Scan(
		&i.ID,
		&i.MeshID,
		&i.ChannelIndex,
		&i.ChannelRole,
		&i.Psk,
		&i.ChannelName,
		&i.Settings,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const importMeshChannels = `-- name: ImportMeshChannels :exec
DELETE FROM mesh_channels WHERE mesh_id = $1
`

// Import all 8 channels from device config, replacing existing ones
// This should be called within a transaction
func (q *Queries) ImportMeshChannels(ctx context.Context, meshID int64) error {
	_, err := q.db.Exec(ctx, importMeshChannels, meshID)
	return err
}

const listMeshChannels = `-- name: ListMeshChannels :many
SELECT id, mesh_id, channel_index, channel_role, psk, channel_name, settings, created_at, updated_at FROM mesh_channels
WHERE mesh_id = $1
ORDER BY channel_index ASC
`

func (q *Queries) ListMeshChannels(ctx context.Context, meshID int64) ([]MeshChannel, error) {
	rows, err := q.db.Query(ctx, listMeshChannels, meshID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []MeshChannel
	for rows.Next() {
		var i MeshChannel
		if err := rows.Scan(
			&i.ID,
			&i.MeshID,
			&i.ChannelIndex,
			&i.ChannelRole,
			&i.Psk,
			&i.ChannelName,
			&i.Settings,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const upsertMeshChannel = `-- name: UpsertMeshChannel :one
INSERT INTO mesh_channels (
    mesh_id,
    channel_index,
    channel_role,
    psk,
    channel_name,
    settings
) VALUES (
    $1,
    $2,
    $3,
    $4,
    $5,
    $6
)
ON CONFLICT (mesh_id, channel_index)
DO UPDATE SET
    channel_role = EXCLUDED.channel_role,
    psk = EXCLUDED.psk,
    channel_name = EXCLUDED.channel_name,
    settings = EXCLUDED.settings,
    updated_at = NOW()
RETURNING id, mesh_id, channel_index, channel_role, psk, channel_name, settings, created_at, updated_at
`

type UpsertMeshChannelParams struct {
	MeshID       int64   `json:"mesh_id"`
	ChannelIndex int32   `json:"channel_index"`
	ChannelRole  string  `json:"channel_role"`
	Psk          []byte  `json:"psk"`
	ChannelName  *string `json:"channel_name"`
	Settings     []byte  `json:"settings"`
}

// Insert or update a mesh channel
func (q *Queries) UpsertMeshChannel(ctx context.Context, arg UpsertMeshChannelParams) (MeshChannel, error) {
	row := q.db.QueryRow(ctx, upsertMeshChannel,
		arg.MeshID,
		arg.ChannelIndex,
		arg.ChannelRole,
		arg.Psk,
		arg.ChannelName,
		arg.Settings,
	)
	var i MeshChannel
	err := row.Scan(
		&i.ID,
		&i.MeshID,
		&i.ChannelIndex,
		&i.ChannelRole,
		&i.Psk,
		&i.ChannelName,
		&i.Settings,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
