// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: meshes.sql

package meshdb

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createMesh = `-- name: CreateMesh :one
INSERT INTO meshes (owner_id, name, description, lora_region, modem_preset, frequency_slot)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, owner_id, name, description, created_at, updated_at, lora_region, modem_preset, frequency_slot
`

type CreateMeshParams struct {
	OwnerID       int64       `json:"owner_id"`
	Name          string      `json:"name"`
	Description   *string     `json:"description"`
	LoraRegion    *string     `json:"lora_region"`
	ModemPreset   *string     `json:"modem_preset"`
	FrequencySlot pgtype.Int4 `json:"frequency_slot"`
}

func (q *Queries) CreateMesh(ctx context.Context, arg CreateMeshParams) (Mesh, error) {
	row := q.db.QueryRow(ctx, createMesh,
		arg.OwnerID,
		arg.Name,
		arg.Description,
		arg.LoraRegion,
		arg.ModemPreset,
		arg.FrequencySlot,
	)
	var i Mesh
	err := row.Scan(
		&i.ID,
		&i.OwnerID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.LoraRegion,
		&i.ModemPreset,
		&i.FrequencySlot,
	)
	return i, err
}

const deleteMesh = `-- name: DeleteMesh :exec
DELETE FROM meshes
WHERE id = $1
`

func (q *Queries) DeleteMesh(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteMesh, id)
	return err
}

const getMeshByID = `-- name: GetMeshByID :one
SELECT id, owner_id, name, description, created_at, updated_at, lora_region, modem_preset, frequency_slot FROM meshes
WHERE id = $1
`

func (q *Queries) GetMeshByID(ctx context.Context, id int64) (Mesh, error) {
	row := q.db.QueryRow(ctx, getMeshByID, id)
	var i Mesh
	err := row.Scan(
		&i.ID,
		&i.OwnerID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.LoraRegion,
		&i.ModemPreset,
		&i.FrequencySlot,
	)
	return i, err
}

const listMeshesByOwner = `-- name: ListMeshesByOwner :many
SELECT id, owner_id, name, description, created_at, updated_at, lora_region, modem_preset, frequency_slot FROM meshes
WHERE owner_id = $1
ORDER BY created_at DESC
`

func (q *Queries) ListMeshesByOwner(ctx context.Context, ownerID int64) ([]Mesh, error) {
	rows, err := q.db.Query(ctx, listMeshesByOwner, ownerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Mesh
	for rows.Next() {
		var i Mesh
		if err := rows.Scan(
			&i.ID,
			&i.OwnerID,
			&i.Name,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.LoraRegion,
			&i.ModemPreset,
			&i.FrequencySlot,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listMeshesByUser = `-- name: ListMeshesByUser :many
SELECT DISTINCT m.id, m.owner_id, m.name, m.description, m.created_at, m.updated_at, m.lora_region, m.modem_preset, m.frequency_slot FROM meshes m
LEFT JOIN mesh_access ma ON m.id = ma.mesh_id
WHERE m.owner_id = $1 OR ma.user_id = $1
ORDER BY m.created_at DESC
`

func (q *Queries) ListMeshesByUser(ctx context.Context, userID int64) ([]Mesh, error) {
	rows, err := q.db.Query(ctx, listMeshesByUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Mesh
	for rows.Next() {
		var i Mesh
		if err := rows.Scan(
			&i.ID,
			&i.OwnerID,
			&i.Name,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.LoraRegion,
			&i.ModemPreset,
			&i.FrequencySlot,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateMesh = `-- name: UpdateMesh :one
UPDATE meshes
SET
    name = COALESCE($1, name),
    description = COALESCE($2, description),
    lora_region = COALESCE($3, lora_region),
    modem_preset = COALESCE($4, modem_preset),
    frequency_slot = COALESCE($5, frequency_slot),
    updated_at = NOW()
WHERE id = $6
RETURNING id, owner_id, name, description, created_at, updated_at, lora_region, modem_preset, frequency_slot
`

type UpdateMeshParams struct {
	Name          *string     `json:"name"`
	Description   *string     `json:"description"`
	LoraRegion    *string     `json:"lora_region"`
	ModemPreset   *string     `json:"modem_preset"`
	FrequencySlot pgtype.Int4 `json:"frequency_slot"`
	ID            int64       `json:"id"`
}

func (q *Queries) UpdateMesh(ctx context.Context, arg UpdateMeshParams) (Mesh, error) {
	row := q.db.QueryRow(ctx, updateMesh,
		arg.Name,
		arg.Description,
		arg.LoraRegion,
		arg.ModemPreset,
		arg.FrequencySlot,
		arg.ID,
	)
	var i Mesh
	err := row.Scan(
		&i.ID,
		&i.OwnerID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.LoraRegion,
		&i.ModemPreset,
		&i.FrequencySlot,
	)
	return i, err
}
