// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: admin_keys.sql

package meshdb

import (
	"context"
)

const countAdminKeysByMesh = `-- name: CountAdminKeysByMesh :one
SELECT COUNT(*) FROM admin_keys
WHERE mesh_id = $1
`

func (q *Queries) CountAdminKeysByMesh(ctx context.Context, meshID int64) (int64, error) {
	row := q.db.QueryRow(ctx, countAdminKeysByMesh, meshID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createAdminKey = `-- name: CreateAdminKey :one
INSERT INTO admin_keys (mesh_id, public_key, key_name, added_by)
VALUES ($1, $2, $3, $4)
RETURNING id, mesh_id, public_key, key_name, added_by, created_at
`

type CreateAdminKeyParams struct {
	MeshID    int64   `json:"mesh_id"`
	PublicKey []byte  `json:"public_key"`
	KeyName   *string `json:"key_name"`
	AddedBy   int64   `json:"added_by"`
}

func (q *Queries) CreateAdminKey(ctx context.Context, arg CreateAdminKeyParams) (AdminKey, error) {
	row := q.db.QueryRow(ctx, createAdminKey,
		arg.MeshID,
		arg.PublicKey,
		arg.KeyName,
		arg.AddedBy,
	)
	var i AdminKey
	err := row.Scan(
		&i.ID,
		&i.MeshID,
		&i.PublicKey,
		&i.KeyName,
		&i.AddedBy,
		&i.CreatedAt,
	)
	return i, err
}

const deleteAdminKey = `-- name: DeleteAdminKey :exec
DELETE FROM admin_keys
WHERE id = $1
`

func (q *Queries) DeleteAdminKey(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteAdminKey, id)
	return err
}

const getAdminKey = `-- name: GetAdminKey :one
SELECT id, mesh_id, public_key, key_name, added_by, created_at FROM admin_keys
WHERE id = $1
`

func (q *Queries) GetAdminKey(ctx context.Context, id int64) (AdminKey, error) {
	row := q.db.QueryRow(ctx, getAdminKey, id)
	var i AdminKey
	err := row.Scan(
		&i.ID,
		&i.MeshID,
		&i.PublicKey,
		&i.KeyName,
		&i.AddedBy,
		&i.CreatedAt,
	)
	return i, err
}

const listAdminKeysByMesh = `-- name: ListAdminKeysByMesh :many
SELECT id, mesh_id, public_key, key_name, added_by, created_at FROM admin_keys
WHERE mesh_id = $1
ORDER BY created_at DESC
`

func (q *Queries) ListAdminKeysByMesh(ctx context.Context, meshID int64) ([]AdminKey, error) {
	rows, err := q.db.Query(ctx, listAdminKeysByMesh, meshID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AdminKey
	for rows.Next() {
		var i AdminKey
		if err := rows.Scan(
			&i.ID,
			&i.MeshID,
			&i.PublicKey,
			&i.KeyName,
			&i.AddedBy,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
