// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.10
// 	protoc        v6.32.1
// source: meshtastic.proto

package meshtastic_cli

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Message sent from client to radio
type ToRadio struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Payload:
	//
	//	*ToRadio_WantConfigId
	//	*ToRadio_Disconnect
	Payload       isToRadio_Payload `protobuf_oneof:"payload"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ToRadio) Reset() {
	*x = ToRadio{}
	mi := &file_meshtastic_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ToRadio) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ToRadio) ProtoMessage() {}

func (x *ToRadio) ProtoReflect() protoreflect.Message {
	mi := &file_meshtastic_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ToRadio.ProtoReflect.Descriptor instead.
func (*ToRadio) Descriptor() ([]byte, []int) {
	return file_meshtastic_proto_rawDescGZIP(), []int{0}
}

func (x *ToRadio) GetPayload() isToRadio_Payload {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *ToRadio) GetWantConfigId() uint32 {
	if x != nil {
		if x, ok := x.Payload.(*ToRadio_WantConfigId); ok {
			return x.WantConfigId
		}
	}
	return 0
}

func (x *ToRadio) GetDisconnect() bool {
	if x != nil {
		if x, ok := x.Payload.(*ToRadio_Disconnect); ok {
			return x.Disconnect
		}
	}
	return false
}

type isToRadio_Payload interface {
	isToRadio_Payload()
}

type ToRadio_WantConfigId struct {
	WantConfigId uint32 `protobuf:"varint,3,opt,name=want_config_id,json=wantConfigId,proto3,oneof"` // Request config with this ID
}

type ToRadio_Disconnect struct {
	Disconnect bool `protobuf:"varint,4,opt,name=disconnect,proto3,oneof"` // Disconnect from radio
}

func (*ToRadio_WantConfigId) isToRadio_Payload() {}

func (*ToRadio_Disconnect) isToRadio_Payload() {}

// Message sent from radio to client
type FromRadio struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	Id    uint32                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"` // Packet ID
	// Types that are valid to be assigned to Payload:
	//
	//	*FromRadio_MyInfo
	//	*FromRadio_NodeInfo
	//	*FromRadio_ConfigCompleteId
	//	*FromRadio_LogRecord
	Payload       isFromRadio_Payload `protobuf_oneof:"payload"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FromRadio) Reset() {
	*x = FromRadio{}
	mi := &file_meshtastic_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FromRadio) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FromRadio) ProtoMessage() {}

func (x *FromRadio) ProtoReflect() protoreflect.Message {
	mi := &file_meshtastic_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FromRadio.ProtoReflect.Descriptor instead.
func (*FromRadio) Descriptor() ([]byte, []int) {
	return file_meshtastic_proto_rawDescGZIP(), []int{1}
}

func (x *FromRadio) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *FromRadio) GetPayload() isFromRadio_Payload {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *FromRadio) GetMyInfo() *MyNodeInfo {
	if x != nil {
		if x, ok := x.Payload.(*FromRadio_MyInfo); ok {
			return x.MyInfo
		}
	}
	return nil
}

func (x *FromRadio) GetNodeInfo() *NodeInfo {
	if x != nil {
		if x, ok := x.Payload.(*FromRadio_NodeInfo); ok {
			return x.NodeInfo
		}
	}
	return nil
}

func (x *FromRadio) GetConfigCompleteId() uint32 {
	if x != nil {
		if x, ok := x.Payload.(*FromRadio_ConfigCompleteId); ok {
			return x.ConfigCompleteId
		}
	}
	return 0
}

func (x *FromRadio) GetLogRecord() string {
	if x != nil {
		if x, ok := x.Payload.(*FromRadio_LogRecord); ok {
			return x.LogRecord
		}
	}
	return ""
}

type isFromRadio_Payload interface {
	isFromRadio_Payload()
}

type FromRadio_MyInfo struct {
	MyInfo *MyNodeInfo `protobuf:"bytes,3,opt,name=my_info,json=myInfo,proto3,oneof"` // Node information
}

type FromRadio_NodeInfo struct {
	NodeInfo *NodeInfo `protobuf:"bytes,4,opt,name=node_info,json=nodeInfo,proto3,oneof"` // Node database entry
}

type FromRadio_ConfigCompleteId struct {
	ConfigCompleteId uint32 `protobuf:"varint,6,opt,name=config_complete_id,json=configCompleteId,proto3,oneof"` // Config complete confirmation
}

type FromRadio_LogRecord struct {
	LogRecord string `protobuf:"bytes,10,opt,name=log_record,json=logRecord,proto3,oneof"` // Debug log output
}

func (*FromRadio_MyInfo) isFromRadio_Payload() {}

func (*FromRadio_NodeInfo) isFromRadio_Payload() {}

func (*FromRadio_ConfigCompleteId) isFromRadio_Payload() {}

func (*FromRadio_LogRecord) isFromRadio_Payload() {}

// Basic node information
type MyNodeInfo struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	MyNodeNum       uint32                 `protobuf:"varint,1,opt,name=my_node_num,json=myNodeNum,proto3" json:"my_node_num,omitempty"`                // Node number
	HasGps          bool                   `protobuf:"varint,2,opt,name=has_gps,json=hasGps,proto3" json:"has_gps,omitempty"`                           // GPS availability
	FirmwareVersion string                 `protobuf:"bytes,6,opt,name=firmware_version,json=firmwareVersion,proto3" json:"firmware_version,omitempty"` // Firmware version
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *MyNodeInfo) Reset() {
	*x = MyNodeInfo{}
	mi := &file_meshtastic_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MyNodeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MyNodeInfo) ProtoMessage() {}

func (x *MyNodeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_meshtastic_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MyNodeInfo.ProtoReflect.Descriptor instead.
func (*MyNodeInfo) Descriptor() ([]byte, []int) {
	return file_meshtastic_proto_rawDescGZIP(), []int{2}
}

func (x *MyNodeInfo) GetMyNodeNum() uint32 {
	if x != nil {
		return x.MyNodeNum
	}
	return 0
}

func (x *MyNodeInfo) GetHasGps() bool {
	if x != nil {
		return x.HasGps
	}
	return false
}

func (x *MyNodeInfo) GetFirmwareVersion() string {
	if x != nil {
		return x.FirmwareVersion
	}
	return ""
}

// Node database entry
type NodeInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Num           uint32                 `protobuf:"varint,1,opt,name=num,proto3" json:"num,omitempty"`  // Node number
	User          *User                  `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"` // User information
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NodeInfo) Reset() {
	*x = NodeInfo{}
	mi := &file_meshtastic_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NodeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeInfo) ProtoMessage() {}

func (x *NodeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_meshtastic_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeInfo.ProtoReflect.Descriptor instead.
func (*NodeInfo) Descriptor() ([]byte, []int) {
	return file_meshtastic_proto_rawDescGZIP(), []int{3}
}

func (x *NodeInfo) GetNum() uint32 {
	if x != nil {
		return x.Num
	}
	return 0
}

func (x *NodeInfo) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

// User information
type User struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`                                // User ID (hardware ID)
	LongName      string                 `protobuf:"bytes,2,opt,name=long_name,json=longName,proto3" json:"long_name,omitempty"`    // Long name
	ShortName     string                 `protobuf:"bytes,3,opt,name=short_name,json=shortName,proto3" json:"short_name,omitempty"` // Short name
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *User) Reset() {
	*x = User{}
	mi := &file_meshtastic_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *User) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*User) ProtoMessage() {}

func (x *User) ProtoReflect() protoreflect.Message {
	mi := &file_meshtastic_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use User.ProtoReflect.Descriptor instead.
func (*User) Descriptor() ([]byte, []int) {
	return file_meshtastic_proto_rawDescGZIP(), []int{4}
}

func (x *User) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *User) GetLongName() string {
	if x != nil {
		return x.LongName
	}
	return ""
}

func (x *User) GetShortName() string {
	if x != nil {
		return x.ShortName
	}
	return ""
}

var File_meshtastic_proto protoreflect.FileDescriptor

const file_meshtastic_proto_rawDesc = "" +
	"\n" +
	"\x10meshtastic.proto\x12\n" +
	"meshtastic\"^\n" +
	"\aToRadio\x12&\n" +
	"\x0ewant_config_id\x18\x03 \x01(\rH\x00R\fwantConfigId\x12 \n" +
	"\n" +
	"disconnect\x18\x04 \x01(\bH\x00R\n" +
	"disconnectB\t\n" +
	"\apayload\"\xdf\x01\n" +
	"\tFromRadio\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\rR\x02id\x121\n" +
	"\amy_info\x18\x03 \x01(\v2\x16.meshtastic.MyNodeInfoH\x00R\x06myInfo\x123\n" +
	"\tnode_info\x18\x04 \x01(\v2\x14.meshtastic.NodeInfoH\x00R\bnodeInfo\x12.\n" +
	"\x12config_complete_id\x18\x06 \x01(\rH\x00R\x10configCompleteId\x12\x1f\n" +
	"\n" +
	"log_record\x18\n" +
	" \x01(\tH\x00R\tlogRecordB\t\n" +
	"\apayload\"p\n" +
	"\n" +
	"MyNodeInfo\x12\x1e\n" +
	"\vmy_node_num\x18\x01 \x01(\rR\tmyNodeNum\x12\x17\n" +
	"\ahas_gps\x18\x02 \x01(\bR\x06hasGps\x12)\n" +
	"\x10firmware_version\x18\x06 \x01(\tR\x0ffirmwareVersion\"B\n" +
	"\bNodeInfo\x12\x10\n" +
	"\x03num\x18\x01 \x01(\rR\x03num\x12$\n" +
	"\x04user\x18\x02 \x01(\v2\x10.meshtastic.UserR\x04user\"R\n" +
	"\x04User\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x1b\n" +
	"\tlong_name\x18\x02 \x01(\tR\blongName\x12\x1d\n" +
	"\n" +
	"short_name\x18\x03 \x01(\tR\tshortNameB.Z,github.com/skandragon/meshmgr/meshtastic-clib\x06proto3"

var (
	file_meshtastic_proto_rawDescOnce sync.Once
	file_meshtastic_proto_rawDescData []byte
)

func file_meshtastic_proto_rawDescGZIP() []byte {
	file_meshtastic_proto_rawDescOnce.Do(func() {
		file_meshtastic_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_meshtastic_proto_rawDesc), len(file_meshtastic_proto_rawDesc)))
	})
	return file_meshtastic_proto_rawDescData
}

var file_meshtastic_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_meshtastic_proto_goTypes = []any{
	(*ToRadio)(nil),    // 0: meshtastic.ToRadio
	(*FromRadio)(nil),  // 1: meshtastic.FromRadio
	(*MyNodeInfo)(nil), // 2: meshtastic.MyNodeInfo
	(*NodeInfo)(nil),   // 3: meshtastic.NodeInfo
	(*User)(nil),       // 4: meshtastic.User
}
var file_meshtastic_proto_depIdxs = []int32{
	2, // 0: meshtastic.FromRadio.my_info:type_name -> meshtastic.MyNodeInfo
	3, // 1: meshtastic.FromRadio.node_info:type_name -> meshtastic.NodeInfo
	4, // 2: meshtastic.NodeInfo.user:type_name -> meshtastic.User
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_meshtastic_proto_init() }
func file_meshtastic_proto_init() {
	if File_meshtastic_proto != nil {
		return
	}
	file_meshtastic_proto_msgTypes[0].OneofWrappers = []any{
		(*ToRadio_WantConfigId)(nil),
		(*ToRadio_Disconnect)(nil),
	}
	file_meshtastic_proto_msgTypes[1].OneofWrappers = []any{
		(*FromRadio_MyInfo)(nil),
		(*FromRadio_NodeInfo)(nil),
		(*FromRadio_ConfigCompleteId)(nil),
		(*FromRadio_LogRecord)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_meshtastic_proto_rawDesc), len(file_meshtastic_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_meshtastic_proto_goTypes,
		DependencyIndexes: file_meshtastic_proto_depIdxs,
		MessageInfos:      file_meshtastic_proto_msgTypes,
	}.Build()
	File_meshtastic_proto = out.File
	file_meshtastic_proto_goTypes = nil
	file_meshtastic_proto_depIdxs = nil
}
